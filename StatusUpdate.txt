<client>
<server>
The server has a lot of templates, foundations, and concepts in place. It is capable of having a secure HTTPS connection to allow for securely passing a password to the server as well as a token system to allow authenticated users to perform actions specific to their account. This feature though is not going to be used because it is not within the scope of the project. The server has gamestates it can keep track of, these represent the game itself and the logic of the tictactoe game. Currently the game.js allows a user to select a specific running game and send a POST with information about what new state it should have. game.js is responsible for communicating between the client and the server. The server is also capable of notifying clients when a change has occurred in the game (this is important because if one player makes a move the other player should be able to see the move promptly). The server does not allow the client to have direct access to the database and delegates that work to db.js (though it's a work in progress). In the future the server will have to support notifying less clients per event, displaying names for clients, and a challenge system (which can be assited by the lobby system in place).

Discuss the current progress on your project. What is going well, and where are you struggling? How has your design changed since you originally wrote it - are there features that you will have to omit, or new features that you've added? 

Created a DBInterface class with a constructor that initializes the database and provides a method for adding a new user. This is still in progress and when completed will then move to allowing the games state to be stored and queried from the database. 

An AWS EC2 instance has been deployed and tested with an example project. Need to deploy the exisiting state of the game to test that it is work as the projects stands. The server and database will run as systemd services in the final deployment. 

The game screen has been created, providing a clear display for the players that distinguishes which is Xs, which is Os, and whose turn it is at any given moment. All tic-tac-toe game logic is handled, also displaying when X or O wins and the game is over. The screen allows players to reset the board, navigate to other screens (Lobby or Leaderboard). There is still a bug where any client can place both X and O, not preventing them from playing out of turn which we plan to fix.

Style documents for each page have been created, organizing the buttons and board in a more pleasing manner. Images and further stylization of each page will be added to make the gameplay more enjoyable. Originally a bot would have been added to play against, but due to unneeded complexity it will no longer be added. 

For the sake of time and quality of the finished product we have also chosen to keep important features and remove some extra "bells and whistles" â€“ profile pictures for users, passwords for account creation and the ability to play the game against a bot. This will allow us to focus on more crucial parts of the project instead of stretching our time on unnecessary features.
